---
- name: Create directory structure
  win_file:
    path: C:\Download\LoadGen
    state: directory

- name: Check if LoadGen is downloaded yet
  win_stat:
    path: C:\Download\LoadGen\LoadGenSuite.zip
  register: download_file

- name: Download LoadGen Suite
  win_get_url:
    url: "https://download.loadgen.cloud/loadgen/CurrentMSI/LoadGenSuite.zip"
    dest: C:\Download\LoadGen\LoadGenSuite.zip
  when: download_file.stat.exists == False

- name: Check if LoadGen is exctracted yet
  win_stat:
    path: C:\Download\LoadGen\LoadGenSuite.exe
  register: extracted_file

- name: Extract LoadGen Suite zip
  win_unzip:
    src: C:\Download\LoadGen\LoadGenSuite.zip
    dest: C:\Download\LoadGen\
    creates: C:\Download\LoadGen\LoadGenSuite.exe
  when: extracted_file.stat.exists == False

- name: Install LoadGen
  win_package:
    path: C:\Download\LoadGen\LoadGenSuite.exe
    product_id: '{ED23CB99-3CCE-493E-8724-531632A2ACDD}' # LoadGen 5.0
    arguments: /S /v/qn
    expected_return_code: [0]
    state: present

# - name: Check if LoadGen Agent is installed
#   win_stat:
#     path: C:\Program Files\LoadGen\LoadGen Agent\LoadGen LoadBot Agent.exe
#   register: loadgen_agent

# - name: Create ProgramData directory structure for Agent
#   win_file:
#     path: C:\ProgramData\LoadGen\Download\Agent
#     state: directory
#   when: loadgen_agent.stat.exists == False

# - name: Download LoadGen Agent
#   win_get_url:
#     url: "https://download.loadgen.cloud/loadgen/{{ loadgen_version }}/LoadGenAgent.txt"
#     dest: C:\ProgramData\LoadGen\Download\Agent\AutoUpdate.dat
#   when: loadgen_agent.stat.exists == False

# - name: Run AutoUpdater for LoadGen Agent
#   win_command: '"C:\Program Files\LoadGen\AutoUpdater.exe" -i "C:\ProgramData\LoadGen\Download\Agent\AutoUpdate.dat"'
#   when: loadgen_agent.stat.exists == False

- name: Check if LoadGen Director is installed
  win_stat:
    path: C:\Program Files\LoadGen\LoadGen Director\LoadGen Director.exe
  register: loadgen_director

- name: Create ProgramData directory structure for Director
  win_file:
    path: C:\ProgramData\LoadGen\Download\Director
    state: directory
  when: loadgen_director.stat.exists == False

- name: Download LoadGen Director
  win_get_url:
    url: "https://download.loadgen.cloud/loadgen/{{ loadgen_version }}/LoadGenDirector.txt"
    dest: C:\ProgramData\LoadGen\Download\Director\AutoUpdate.dat
  when: loadgen_director.stat.exists == False

- name: Run AutoUpdater for LoadGen Director
  win_command: '"C:\Program Files\LoadGen\AutoUpdater.exe" -i "C:\ProgramData\LoadGen\Download\Director\AutoUpdate.dat"'
  when: loadgen_director.stat.exists == False

- name: Check if LoadGen Studio is installed
  win_stat:
    path: C:\Program Files\LoadGen\LoadGen Studio\LoadGen Studio.exe
  register: loadgen_studio

- name: Create ProgramData directory structure for Studio
  win_file:
    path: C:\ProgramData\LoadGen\Download\Studio
    state: directory
  when: loadgen_studio.stat.exists == False

- name: Download LoadGen Studio
  win_get_url:
    url: "https://download.loadgen.cloud/loadgen/{{ loadgen_version }}/LoadGenStudio.txt"
    dest: C:\ProgramData\LoadGen\Download\Studio\AutoUpdate.dat
  when: loadgen_studio.stat.exists == False

- name: Run AutoUpdater for LoadGen Studio
  win_command: '"C:\Program Files\LoadGen\AutoUpdater.exe" -i "C:\ProgramData\LoadGen\Download\Studio\AutoUpdate.dat"'
  when: loadgen_studio.stat.exists == False

- name: Check if LoadGen Analyzer is installed
  win_stat:
    path: C:\Program Files\LoadGen\LoadGen Analyzer\LoadGen Analyzer.exe
  register: loadgen_analyzer

- name: Create ProgramData directory structure for Analyzer
  win_file:
    path: C:\ProgramData\LoadGen\Download\Analyzer
    state: directory
  when: loadgen_analyzer.stat.exists == False

- name: Download LoadGen Analyzer
  win_get_url:
    url: "https://download.loadgen.cloud/loadgen/{{ loadgen_version }}/LoadGenAnalyzer.txt"
    dest: C:\ProgramData\LoadGen\Download\Analyzer\AutoUpdate.dat
  when: loadgen_analyzer.stat.exists == False

- name: Run AutoUpdater for LoadGen Analyzer
  win_command: '"C:\Program Files\LoadGen\AutoUpdater.exe" -i "C:\ProgramData\LoadGen\Download\Analyzer\AutoUpdate.dat"'
  when: loadgen_analyzer.stat.exists == False

- name: Remove ProgramData download directory structure for Director
  win_file:
    path: C:\ProgramData\LoadGen\Download
    state: absent

- name: Create ProgramData for Director Config
  win_file:
    path: C:\ProgramData\LoadGen\Director
    state: directory

- name: Create ProgramData for Director Config
  win_copy:
    src: LoadGenDatasources.xml
    dest: C:\ProgramData\LoadGen\Director\LoadGenDatasources.xml

- name: Set the LoadGen DatasourceName
  win_xml:
   path: C:\ProgramData\LoadGen\Director\LoadGenDatasources.xml
   xpath: '//DatasourceName[0]'
   fragment: "{{ datasource_name }}"
   type: text

# - name: Set the LoadGen Active
#   win_xml:
#    path: C:\ProgramData\LoadGen\Director\LoadGenDatasources.xml
#    xpath: '//*/*'
#    attribute: DatasourceName
#    fragment: "{{ datasource_active }}"
#    type: text

# - name: Set the LoadGen DatabaseName
#   win_xml:
#    path: C:\ProgramData\LoadGen\Director\LoadGenDatasources.xml
#    xpath: '//*/*'
#    attribute: DatabaseName
#    fragment: "{{ datasource_databasename }}"
#    type: text

# - name: Set the LoadGen IntegratedSecurity
#   win_xml:
#    path: C:\ProgramData\LoadGen\Director\LoadGenDatasources.xml
#    xpath: '//*/*'
#    attribute: IntegratedSecurity
#    fragment: "{{ datasource_integrated_security }}"
#    type: text

# - name: Set the LoadGen Password
#   win_xml:
#    path: C:\ProgramData\LoadGen\Director\LoadGenDatasources.xml
#    xpath: '//*/*'
#    attribute: Password
#    fragment: "{{ datasource_password }}"
#    type: text

# - name: Set the LoadGen UserId
#   win_xml:
#    path: C:\ProgramData\LoadGen\Director\LoadGenDatasources.xml
#    xpath: '//*/*'
#    attribute: UserId
#    fragment: "{{ datasource_user_id }}"
#    type: text

# - name: Set the LoadGen Servername
#   win_xml:
#    path: C:\ProgramData\LoadGen\Director\LoadGenDatasources.xml
#    xpath: '//*/*'
#    attribute: Servername
#    fragment: "{{ datasource_servername }}"
#    type: text

# - name: Set the LoadGen TableCreateOnLoadTest
#   win_xml:
#    path: C:\ProgramData\LoadGen\Director\LoadGenDatasources.xml
#    xpath: '//*/*'
#    attribute: TableCreateOnLoadTest
#    fragment: "{{ datasource_table_create_on_load_test }}"
#    type: text

# - name: Set the LoadGen TablenameDuaf
#   win_xml:
#    path: C:\ProgramData\LoadGen\Director\LoadGenDatasources.xml
#    xpath: '//*/*'
#    attribute: TablenameDuaf
#    fragment: "{{ datasource_tablename_duaf }}"
#    type: text

# - name: Set the LoadGen TablenamePerformanceCounters
#   win_xml:
#    path: C:\ProgramData\LoadGen\Director\LoadGenDatasources.xml
#    xpath: '//*/*'
#    attribute: TablenamePerformanceCounters
#    fragment: "{{ datasource_tablename_performance_counters }}"
#    type: text

# - name: Set the LoadGen TableprefixDuaf
#   win_xml:
#    path: C:\ProgramData\LoadGen\Director\LoadGenDatasources.xml
#    xpath: '//*/*'
#    attribute: TableprefixDuaf
#    fragment: "{{ datasource_tableprefix_duaf }}"
#    type: text

# - name: Set the LoadGen TableprefixPerformanceCounters
#   win_xml:
#    path: C:\ProgramData\LoadGen\Director\LoadGenDatasources.xml
#    xpath: '//*/*'
#    attribute: TableprefixPerformanceCounters
#    fragment: "{{ datasource_tableprefix_performance_counters }}"
#    type: text

# - name: Set the LoadGen UpdateInterval
#   win_xml:
#    path: C:\ProgramData\LoadGen\Director\LoadGenDatasources.xml
#    xpath: '//*/*'
#    attribute: UpdateInterval
#    fragment: "{{ datasource_update_interval }}"
#    type: text

# - name: Set the LoadGen DebugSqlUpdateCount
#   win_xml:
#    path: C:\ProgramData\LoadGen\Director\LoadGenDatasources.xml
#    xpath: '//*/*'
#    attribute: DebugSqlUpdateCount
#    fragment: "{{ datasource_debug_sql_update_count }}"
#    type: text

# - name: Set the LoadGen TableSmdCreateOnLoadTest
#   win_xml:
#    path: C:\ProgramData\LoadGen\Director\LoadGenDatasources.xml
#    xpath: '//*/*'
#    attribute: TableSmdCreateOnLoadTest
#    fragment: "{{ dataspirce_table_smd_create_on_load_test }}"
#    type: text