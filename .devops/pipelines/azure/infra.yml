parameters:
- name: azure_build
  type: string

- name: azure_backend
  type: string

- name: azure_client_id
  type: string

- name: azure_client_secret
  type: string

- name: azure_subscription_id
  type: string

- name: azure_tenant_id
  type: string

- name: azure_region
  type: string

- name: azure_delivery
  type: string

- name: azure_workspace
  type: string

- name: devops_token
  type: string

- name: devops_pool
  type: string

jobs:
  - job: BuildInfra
    workspace:
      clean: all
    
    pool:
      vmImage: 'ubuntu-latest'

    steps:

    - task: TerraformInstaller@0
      displayName: Terraform download
      inputs:
        terraformVersion: 'latest'

    - task: DownloadSecureFile@1
      displayName: Download backend configuration
      name: backend
      inputs:
        secureFile: ${{ parameters.azure_backend }}
    
    - task: PowerShell@2
      displayName: Terraform variables
      inputs:
        targetType: 'inline'
        script: |
          $terraformVariable = @()
          $terraformVariable += "azure_client_id=`"${{ parameters.azure_client_id }}`""
          $terraformVariable += "azure_client_secret=`"${{ parameters.azure_client_secret }}`""
          $terraformVariable += "azure_subscription_id=`"${{ parameters.azure_subscription_id }}`""
          $terraformVariable += "azure_tenant_id=`"${{ parameters.azure_tenant_id }}`""
          $terraformVariable += "devops_token=`"${{ parameters.devops_token }}`""
          $terraformVariable += "devops_pool=`"${{ parameters.devops_pool }}`""
          $terraformVariable += "devops_project=`"$(System.TeamProject)`""
          $terraformVariable += "devops_url=`"$(System.CollectionUri)`""
          $terraformVariable += "azure_region=`"${{ parameters.azure_region }}`""

          switch ("${{ parameters.azure_delivery }}") {
            "None" {$delivery = "none"}
            "Citrix Virtual Apps & Desktop Services" {$delivery = "cvads"}
            "Azure Virtual Desktop" {$delivery = "avd"}
            "VMware Horizon Cloud" {$delivery = "horizonc"}
          }

          $terraformVariable += "delivery=`"$delivery`""

          Set-Content -Value $terraformVariable -Path terraform.tfvars -Force
        workingDirectory: '$(Build.Repository.LocalPath)/terraform/azure'

    - task: CmdLine@2
      displayName: Terraform init
      inputs:
        script: | 
          terraform init -backend-config=$(backend.secureFilePath) -input=false 
        workingDirectory: '$(Build.Repository.LocalPath)/terraform/azure'

    - task: CmdLine@2
      displayName: Terraform select or create workspace
      inputs:
        script: | 
          terraform workspace select ${{ lower(parameters.azure_workspace) }} || terraform workspace new ${{ lower(parameters.azure_workspace) }}
        workingDirectory: '$(Build.Repository.LocalPath)/terraform/azure'

    - task: CmdLine@2
      displayName: Terraform validate
      inputs:
        script: 'terraform validate'
        workingDirectory: '$(Build.Repository.LocalPath)/terraform/azure'

    - task: CmdLine@2
      displayName: Terraform plan
      inputs:
        script: 'terraform plan -out=$(Build.Repository.LocalPath)/terraform/infra.tfplan'
        workingDirectory: '$(Build.Repository.LocalPath)/terraform/azure'
      condition: eq('${{ parameters.azure_build }}', 'Create')

    - task: CmdLine@2
      displayName: Terraform plan destroy
      inputs:
        script: 'terraform plan -destroy -out=$(Build.Repository.LocalPath)/terraform/infra.tfplan'
        workingDirectory: '$(Build.Repository.LocalPath)/terraform/azure'
      condition: eq('${{ parameters.azure_build }}', 'Destroy')

    - task: CmdLine@2
      displayName: Terraform apply
      inputs:
        script: 'terraform apply $(Build.Repository.LocalPath)/terraform/infra.tfplan'
        workingDirectory: '$(Build.Repository.LocalPath)/terraform/azure'