parameters:
- name: variable_group
  type: string

- name: ansible_playbook
  type: string

jobs:
  - job: ansible
    displayName: Configure infrastructure

    variables:
    - group: ${{parameters.variable_group}}

    steps:
    - script: |
        pip install --upgrade requests==2.20.1
        apt-get -y install zip
      displayName: 'Python pip upgrade'

    - task: TerraformInstaller@0
      displayName: Terraform download
      inputs:
        terraformVersion: 'latest'

    - task: DownloadSecureFile@1
      displayName: Download backend configuration
      name: backend
      inputs:
        secureFile: "ryan-backend.conf"

    - task: PowerShell@2
      displayName: Terraform variables
      inputs:
        targetType: 'inline'
        script: |

          $variables = @()
          $variables += "common_iso_datastore=`"$(common_iso_datastore)`""

          $variables += "domain_admin=`"$(build_username)`""
          $variables += "domain_admin_password=`"$(build_password)`""
          $variables += "local_admin_password=`"$(build_password)`""

          $variables += "vsphere_server=`"$(vsphere_endpoint)`""
          $variables += "vsphere_user=`"$(vsphere_username)`""
          $variables += "vsphere_password=`"$(vsphere_password)`""

          $variables += "vsphere_datacenter=`"$(vsphere_datacenter)`""
          $variables += "vsphere_cluster=`"$(vsphere_cluster)`""
          $variables += "vsphere_datastore=`"$(vsphere_datastore)`""
          $variables += "vsphere_network=`"$(vsphere_network)`""
          $variables += "vsphere_folder=`"$(vsphere_folder)`""

          $variables += "iso_path=`"$(iso_path)`""
          $variables += "iso_file=`"$(iso_file)`""

          Set-Content -Value $variables -Path terraform/vmware/terraform.tfvars -Force
        workingDirectory: '$(Build.SourcesDirectory)'

    - task: CmdLine@2
      displayName: Terraform init
      inputs:
        script: | 
          terraform init -backend-config=$(backend.secureFilePath) -input=false 
        workingDirectory: '$(Build.Repository.LocalPath)/terraform/vmware'

    - task: CmdLine@2
      displayName: Terraform select or create workspace
      inputs:
        script: | 
          terraform workspace select flowers || terraform workspace new flowers
        workingDirectory: '$(Build.Repository.LocalPath)/terraform/vmware'

    - task: CmdLine@2
      displayName: Terraform pull state
      inputs:
        script: 'terraform state pull > download.tfstate'
        workingDirectory: '$(Build.Repository.LocalPath)/terraform/vmware'

    - task: PowerShell@2
      displayName: Generate Ansible inventory file 
      inputs:
        filePath: '$(Build.Repository.LocalPath)/ansible/powershell/GenerateInventory.ps1'
        arguments: '-StateFile $(Build.Repository.LocalPath)/terraform/vmware/download.tfstate -InventoryFile $(Build.Repository.LocalPath)/ansible/inventory'

    - script:  ansible --version
      displayName: 'Ansible version'

    - script: |  
        export ANSIBLE_USER="$(build_username)"
        export ANSIBLE_PASSWORD="$(build_password)"

        export citrix_username="$(citrix_username)"
        export citrix_password="$(citrix_password)"

        ansible-playbook $(Build.Repository.LocalPath)/ansible/${{ parameters.ansible_playbook }} -i $(Build.Repository.LocalPath)/ansible/inventory -e ansible_user='{{ lookup("env", "ANSIBLE_USER") }}' -e ansible_password='{{ lookup("env", "ANSIBLE_PASSWORD") }}'
      displayName: 'Execute ansible'