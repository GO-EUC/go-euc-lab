parameters:
- name: redeploy
  displayName: Redeploy Build Machines
  type: boolean
  default: false

- name: build
  displayName: Build Machine
  type: string
  default: build-1
  values:
  - build-1
  - build-2
  - build-3
  - build-4
  - build-5
  - build-6

- name: delivery
  displayName: Delivery Model
  type: string
  default: Citrix
  values:
  - Citrix
  - VMware
  - RDSH

trigger:
- none

pr: none

pool: GO Pipelines

variables:
- group: Lab

stages:

- stage: redeploy
  displayName: Redeploy build machines
  jobs:
    - job: infra
      condition: eq('${{ parameters.redeploy }}', true)
      displayName: Build deployment
      steps:

      - task: DownloadBuildArtifacts@1
        displayName: Download Packer manifests
        inputs:
          buildType: 'specific'
          project: $(project_id)
          pipeline: $(pipeline_id)
          buildVersionToDownload: 'latest'
          downloadType: 'single'
          artifactName: 'manifests'
          downloadPath: '$(Build.Repository.LocalPath)'

      - task: PowerShell@2
        displayName: Set variables
        inputs:
          targetType: 'inline'
          script: |
            $env:VAULT_FORMAT="json"
            $env:VAULT_ADDR="$(vault_addr)"
            $env:VAULT_TOKEN="$(vault_token)"
            $env:build="${{ parameters.build }}"
            [int]$build_id = $env:build -replace "[^0-9]" , ''
            $build_id = $build_id -1

            $range = .devops/pipelines/scripts/network-plan.ps1

            $tfVars = @()
            $tfVars += "root_path = `"$(Build.Repository.LocalPath)`""
            $tfVars += "network_list = $($range | ConvertTo-Json)"

            $tfVars | Set-Content -Path terraform/vmware/infra/terraform.tfvars -Force

            Write-Host "##vso[task.setvariable variable=build_id;]$build_id"

      - task: CmdLine@2
        displayName: Terraform init
        inputs:
          script: 'terraform init -backend-config="conn_str=postgres://$(postgress_user):$(postgress_password)@$(postgress_address)/state?sslmode=$(postgress_ssl)"'
          workingDirectory: '$(Build.Repository.LocalPath)/terraform/vmware/infra'

      - task: CmdLine@2
        displayName: Terraform plan
        inputs:
          script: 'terraform plan -var="vault_address=$(vault_addr)" -var="vault_token=$(vault_token)" -replace="module.build.vsphere_virtual_machine.vm[$(build_id)]" -target="module.build" -out=plan.tfplan'
          workingDirectory: '$(Build.Repository.LocalPath)/terraform/vmware/infra'

      - task: CmdLine@2
        displayName: Terraform apply
        inputs:
          script: 'terraform apply "plan.tfplan"'
          workingDirectory: '$(Build.Repository.LocalPath)/terraform/vmware/infra'

- stage: Build
  displayName: Build
  jobs:
  - template: ../templates/ansible-playbook.yml
    parameters:
      ansible_path: $(Build.Repository.LocalPath)/ansible
      build: ${{lower(parameters.build)}}
      delivery: ${{lower(parameters.delivery)}}
      ansible_playbook: windows-image.yml
      vault_addr: $(vault_addr)
      vault_token: $(vault_token)
      terraform_backend: conn_str=postgres://$(postgress_user):$(postgress_password)@$(postgress_address)/state?sslmode=$(postgress_ssl)
      terraform_path: $(Build.Repository.LocalPath)/terraform/vmware/infra